const { chromium } = require('playwright');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

async function captureAndAnnotateScreenshot() {
    const browser = await chromium.launch({ headless: false });
    const context = await browser.newContext();
    const page = await context.newPage();

    // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÏÉùÏÑ±
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const screenshotDir = path.join(__dirname, 'screenshot');
    const annotatedDir = path.join(__dirname, 'annotate_screenshot');

    // ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    if (!fs.existsSync(screenshotDir)) fs.mkdirSync(screenshotDir, { recursive: true });
    if (!fs.existsSync(annotatedDir)) fs.mkdirSync(annotatedDir, { recursive: true });

    try {
        // OMEN Gateway ÌéòÏù¥ÏßÄ Ï†ëÏÜç
        await page.goto('http://localhost:7777', { waitUntil: 'networkidle' });
        await page.waitForTimeout(2000);

        // ÏõêÎ≥∏ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∫°Ï≤ò
        const screenshotPath = path.join(screenshotDir, `omen_gateway_${timestamp}.png`);
        await page.screenshot({
            path: screenshotPath,
            fullPage: true
        });
        console.log(`‚úÖ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∫°Ï≤ò ÏôÑÎ£å: ${screenshotPath}`);

        // DOM ÏöîÏÜå ÏúÑÏπò Ï∂îÏ∂ú
        const elements = await page.evaluate(() => {
            const annotations = [];

            // Ìó§Îçî ÏöîÏÜå
            const header = document.querySelector('h1');
            if (header) {
                const rect = header.getBoundingClientRect();
                annotations.push({
                    x: rect.left,
                    y: rect.top,
                    width: rect.width,
                    height: rect.height,
                    text: '‚úÖ OMEN Gateway v2.0 Ìó§Îçî',
                    color: 'green'
                });
            }

            // ÏÑúÎ≤Ñ ÏÉÅÌÉú Ïπ¥ÎìúÎì§
            const cards = document.querySelectorAll('.server-card');
            cards.forEach((card, index) => {
                const rect = card.getBoundingClientRect();
                const status = card.querySelector('.status-badge');
                const isRunning = status && status.textContent.includes('Ïã§ÌñâÏ§ë');

                annotations.push({
                    x: rect.left,
                    y: rect.top,
                    width: rect.width,
                    height: rect.height,
                    text: isRunning ? '‚úÖ ÏÑúÎ≤Ñ Ïã§ÌñâÏ§ë' : 'üöß ÏÑúÎ≤Ñ ÎåÄÍ∏∞Ï§ë',
                    color: isRunning ? 'green' : 'yellow'
                });
            });

            // Ï†úÏñ¥ Î≤ÑÌäºÎì§
            const controlButtons = document.querySelectorAll('.btn-primary, .btn-success');
            controlButtons.forEach((btn) => {
                const rect = btn.getBoundingClientRect();
                annotations.push({
                    x: rect.left,
                    y: rect.top,
                    width: rect.width,
                    height: rect.height,
                    text: '‚≠ê Ï†úÏñ¥ Î≤ÑÌäº',
                    color: 'blue'
                });
            });

            return annotations;
        });

        // SharpÎ•º ÏÇ¨Ïö©Ìïú Ï£ºÏÑù Ï∂îÍ∞Ä
        const image = sharp(screenshotPath);
        const metadata = await image.metadata();

        // SVG Ïò§Î≤ÑÎ†àÏù¥ ÏÉùÏÑ±
        let svgOverlay = `<svg width="${metadata.width}" height="${metadata.height}">`;

        elements.forEach(elem => {
            const color = elem.color === 'green' ? '#00ff00' :
                         elem.color === 'yellow' ? '#ffff00' :
                         elem.color === 'blue' ? '#0080ff' : '#ff0000';

            // Î∞ïÏä§ Í∑∏Î¶¨Í∏∞
            svgOverlay += `
                <rect x="${elem.x}" y="${elem.y}"
                      width="${elem.width}" height="${elem.height}"
                      fill="none" stroke="${color}" stroke-width="3" opacity="0.8"/>
                <rect x="${elem.x}" y="${elem.y - 25}"
                      width="${Math.min(200, elem.width)}" height="25"
                      fill="${color}" opacity="0.8"/>
                <text x="${elem.x + 5}" y="${elem.y - 5}"
                      fill="white" font-size="14" font-weight="bold">
                    ${elem.text}
                </text>
            `;
        });

        svgOverlay += '</svg>';

        // Ï£ºÏÑùÎêú Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
        const annotatedPath = path.join(annotatedDir, `annotated_omen_gateway_${timestamp}.png`);
        await image
            .composite([{
                input: Buffer.from(svgOverlay),
                top: 0,
                left: 0
            }])
            .toFile(annotatedPath);

        console.log(`‚úÖ Ï£ºÏÑù Ï∂îÍ∞Ä ÏôÑÎ£å: ${annotatedPath}`);

        return {
            original: screenshotPath,
            annotated: annotatedPath,
            timestamp: timestamp
        };

    } finally {
        await browser.close();
    }
}

// Ïã§Ìñâ
captureAndAnnotateScreenshot()
    .then(result => {
        console.log('üì∏ Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÏûëÏóÖ ÏôÑÎ£å:', result);
    })
    .catch(error => {
        console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
    });