<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OMEN 서버 게이트웨이 - 대시보드</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .header {
            background: rgba(255,255,255,0.95);
            padding: 15px 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logo { font-size: 24px; font-weight: bold; color: #667eea; }
        .user-info { display: flex; align-items: center; gap: 15px; }
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
        }
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .status-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .status-card h3 {
            margin-bottom: 15px;
            color: #667eea;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #f5f5f5;
        }
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }
        .status-running { background: #d4edda; color: #155724; }
        .status-stopped { background: #f8d7da; color: #721c24; }
        .status-error { background: #fff3cd; color: #856404; }
        .status-connected { background: #d1ecf1; color: #0c5460; }

        .servers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .server-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .server-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .server-name {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }
        .server-status {
            padding: 6px 16px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: bold;
        }
        .server-info {
            margin-bottom: 15px;
            color: #666;
            line-height: 1.6;
        }
        .server-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s;
        }
        .btn-primary { background: #667eea; color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-danger { background: #dc3545; color: white; }
        .btn-info { background: #17a2b8; color: white; }
        .btn-warning { background: #ffc107; color: #212529; }
        .btn:hover { transform: translateY(-2px); opacity: 0.9; }

        .system-controls {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .refresh-panel {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 1000;
            text-align: center;
        }

        .refresh-btn {
            background: #28a745;
            color: white;
            border: none;
            border-radius: 50px;
            padding: 15px 20px;
            cursor: pointer;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .refresh-btn:hover {
            background: #218838;
            transform: translateY(-2px);
        }

        .refresh-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
        }

        .refresh-btn.loading #refreshIcon {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .last-check {
            background: white;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 8px 12px;
            margin-top: 10px;
            font-size: 12px;
            color: #666;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .loading { opacity: 0.6; pointer-events: none; }

        @media (max-width: 768px) {
            .container { padding: 0 10px; }
            .status-grid, .servers-grid { grid-template-columns: 1fr; }
            .server-actions { justify-content: center; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">🖥️ OMEN 서버 게이트웨이</div>
        <div class="user-info">
            <span>👋 <%= user.name %> (<%= user.role %>)</span>
            <form method="POST" action="/logout" style="display: inline;">
                <button type="submit" class="btn btn-danger">로그아웃</button>
            </form>
        </div>
    </div>

    <div class="refresh-panel">
        <button class="refresh-btn" onclick="refreshStatus()" id="refreshBtn">
            <span id="refreshIcon">🔄</span> 새로고침
        </button>
        <div class="last-check" id="lastCheckTime">
            마지막 확인: <%= new Date().toLocaleString('ko-KR') %>
        </div>
    </div>

    <div class="container">
        <!-- System Status Cards -->
        <div class="status-grid">
            <!-- Cloudflare Status -->
            <div class="status-card">
                <h3>🌐 Cloudflare 터널</h3>
                <div class="status-item">
                    <span>터널 상태</span>
                    <span class="status-badge status-<%= cloudflareStatus.status === 'connected' ? 'connected' : 'error' %>">
                        <%= cloudflareStatus.status === 'connected' ? '연결됨' : cloudflareStatus.status === 'disconnected' ? '연결 끊김' : '오류' %>
                    </span>
                </div>
                <% if (cloudflareStatus.connections.length > 0) { %>
                <div class="status-item">
                    <span>연결 수</span>
                    <span><%= cloudflareStatus.connections.length %>개</span>
                </div>
                <% } %>
            </div>

            <!-- PostgreSQL Status -->
            <div class="status-card">
                <h3>🐘 PostgreSQL</h3>
                <div class="status-item">
                    <span>데이터베이스</span>
                    <span class="status-badge status-<%= postgresqlStatus.status === 'running' ? 'running' : 'stopped' %>">
                        <%= postgresqlStatus.status === 'running' ? '실행중' : postgresqlStatus.status === 'stopped' ? '중지됨' : '알 수 없음' %>
                    </span>
                </div>
                <div class="status-item">
                    <span>상태</span>
                    <span><%= postgresqlStatus.message %></span>
                </div>
                <% if (postgresqlStatus.details && Object.keys(postgresqlStatus.details).length > 0) { %>
                    <% if (postgresqlStatus.details.description) { %>
                    <div class="status-item">
                        <span>설명</span>
                        <span><%= postgresqlStatus.details.description %></span>
                    </div>
                    <% } %>
                    <% if (postgresqlStatus.details.version) { %>
                    <div class="status-item">
                        <span>버전</span>
                        <span>PostgreSQL <%= postgresqlStatus.details.version %></span>
                    </div>
                    <% } %>
                    <% if (postgresqlStatus.details.port) { %>
                    <div class="status-item">
                        <span>포트</span>
                        <span><%= postgresqlStatus.details.port %></span>
                    </div>
                    <% } %>
                    <% if (postgresqlStatus.details.connectionStatus) { %>
                    <div class="status-item">
                        <span>연결 상태</span>
                        <span><%= postgresqlStatus.details.connectionStatus %></span>
                    </div>
                    <% } %>
                    <% if (postgresqlStatus.details.tableCount !== undefined) { %>
                    <div class="status-item">
                        <span>테이블 수</span>
                        <span><%= postgresqlStatus.details.tableCount %>개</span>
                    </div>
                    <% } %>
                    <% if (postgresqlStatus.details.totalRecords !== undefined) { %>
                    <div class="status-item">
                        <span>총 레코드</span>
                        <span><%= postgresqlStatus.details.totalRecords %>개</span>
                    </div>
                    <% } %>
                    <% if (postgresqlStatus.details.serviceName) { %>
                    <div class="status-item">
                        <span>서비스명</span>
                        <span><%= postgresqlStatus.details.serviceName %></span>
                    </div>
                    <% } %>
                <% } %>
                <% if (postgresqlStatus.status === 'running') { %>
                <div class="status-item">
                    <button class="btn btn-info" onclick="showDatabaseDetails()">📊 상세 정보</button>
                </div>
                <% } %>
            </div>

            <!-- Gateway Status -->
            <div class="status-card">
                <h3>⚡ 게이트웨이</h3>
                <div class="status-item">
                    <span>서비스</span>
                    <span class="status-badge status-running">실행중</span>
                </div>
                <div class="status-item">
                    <span>포트</span>
                    <span>7777</span>
                </div>
                <div class="status-item">
                    <span>도메인</span>
                    <span>platformmakers.org</span>
                </div>
            </div>
        </div>

        <!-- Servers Grid -->
        <div class="servers-grid">
            <% servers.forEach(function(server) { %>
            <div class="server-card">
                <div class="server-header">
                    <div class="server-name"><%= server.name %></div>
                    <div class="server-status status-<%= server.status %>">
                        <%= server.status === 'running' ? '✅ 작동중' : '⛔ 중지됨' %>
                    </div>
                </div>

                <div class="server-info">
                    <div><strong>포트:</strong> <%= server.port %></div>
                    <div><strong>도메인:</strong> <a href="<%= server.domain %>" target="_blank" style="color: #667eea; text-decoration: none;"><%= server.domain %></a></div>
                    <div><strong>설명:</strong> <%= server.description %></div>
                </div>

                <div class="server-actions">
                    <% if (server.status === 'running') { %>
                    <button class="btn btn-danger" onclick="controlServer(<%= server.id %>, 'stop')">⛔ 중지</button>
                    <% } else { %>
                    <button class="btn btn-success" onclick="controlServer(<%= server.id %>, 'start')">▶️ 시작</button>
                    <% } %>
                    <a href="<%= server.domain %>" target="_blank" class="btn btn-info">🌐 사이트 열기</a>
                    <button class="btn btn-warning" onclick="editServer(<%= server.id %>)">⚙️ 설정</button>
                </div>
            </div>
            <% }); %>
        </div>

        <!-- System Controls -->
        <div class="system-controls">
            <h3 style="margin-bottom: 20px; color: #667eea;">🔧 시스템 제어</h3>
            <div class="controls-grid">
                <button class="btn btn-primary" onclick="configureAutostart()">🚀 윈도우 자동시작 설정</button>
                <button class="btn btn-info" onclick="refreshStatus()">🔄 전체 상태 새로고침</button>
                <button class="btn btn-warning" onclick="manageDomains()">🌐 도메인 관리</button>
                <button class="btn btn-danger" onclick="shutdownGateway()">⛔ 게이트웨이 종료</button>
            </div>
        </div>
    </div>

    <!-- Database Details Modal -->
    <div id="databaseModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 2000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 12px; padding: 20px; max-width: 90%; max-height: 90%; overflow-y: auto; min-width: 600px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>🐘 PostgreSQL 데이터베이스 상세 정보</h2>
                <button onclick="closeDatabaseDetails()" style="background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
            </div>
            <div id="databaseContent">
                <div style="text-align: center; padding: 20px;">
                    <div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #667eea; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                    <p>데이터베이스 정보를 불러오는 중...</p>
                </div>
            </div>
        </div>
    </div>

    <style>
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .table-list {
            margin-bottom: 20px;
        }
        .table-item {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin-bottom: 10px;
            padding: 15px;
        }
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .table-info {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        .columns-list {
            background: white;
            border-radius: 4px;
            padding: 10px;
            margin-top: 10px;
            max-height: 200px;
            overflow-y: auto;
        }
        .column-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }
        .column-item:last-child {
            border-bottom: none;
        }
        .data-preview {
            background: white;
            border-radius: 4px;
            padding: 10px;
            margin-top: 10px;
            overflow-x: auto;
        }
        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }
        .data-table th, .data-table td {
            border: 1px solid #ddd;
            padding: 5px;
            text-align: left;
        }
        .data-table th {
            background: #f8f9fa;
            font-weight: bold;
        }

        /* New Database Overview Styles */
        .database-overview {
            padding: 20px;
        }
        .statistics-section {
            background: #e3f2fd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #2196f3;
        }
        .stat-item {
            display: inline-block;
            margin-right: 30px;
            font-size: 16px;
        }
        .databases-list {
            margin-top: 20px;
        }
        .database-category {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 12px;
            margin-bottom: 20px;
            padding: 20px;
        }
        .database-category h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }
        .db-description {
            color: #666;
            font-style: italic;
            margin-bottom: 10px;
        }
        .db-stats {
            background: #ffffff;
            border-radius: 6px;
            padding: 10px;
            margin-bottom: 15px;
            border-left: 3px solid #3498db;
            font-weight: bold;
            color: #2c3e50;
        }
        .tables-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        .table-card {
            background: white;
            border: 1px solid #e0e6ed;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s;
        }
        .table-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        .table-name {
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 8px;
            font-size: 14px;
        }
        .table-stats {
            color: #666;
            font-size: 12px;
            margin-bottom: 10px;
        }
        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
        }
        .no-tables {
            color: #666;
            font-style: italic;
            text-align: center;
            padding: 20px;
        }
    </style>

    <script>
        // Refresh status
        function refreshStatus() {
            const refreshBtn = document.getElementById('refreshBtn');
            const lastCheckTime = document.getElementById('lastCheckTime');

            // 로딩 상태 설정
            refreshBtn.classList.add('loading');
            refreshBtn.disabled = true;
            refreshBtn.innerHTML = '<span id="refreshIcon">🔄</span> 새로고침 중...';

            fetch('/api/servers/status')
                .then(response => response.json())
                .then(data => {
                    // 마지막 체크 시간 업데이트
                    const now = new Date();
                    lastCheckTime.textContent = '마지막 확인: ' + now.toLocaleString('ko-KR');

                    // 페이지 새로고침
                    location.reload();
                })
                .catch(error => {
                    console.error('Status refresh failed:', error);
                    alert('상태 새로고침 실패: ' + error.message);

                    // 에러 시에도 시간 업데이트
                    const now = new Date();
                    lastCheckTime.textContent = '마지막 확인 실패: ' + now.toLocaleString('ko-KR');
                })
                .finally(() => {
                    // 로딩 상태 해제
                    refreshBtn.classList.remove('loading');
                    refreshBtn.disabled = false;
                    refreshBtn.innerHTML = '<span id="refreshIcon">🔄</span> 새로고침';
                });
        }

        // Control server
        function controlServer(serverId, action) {
            if (!confirm(`서버를 ${action === 'start' ? '시작' : '중지'}하시겠습니까?`)) {
                return;
            }

            fetch(`/api/servers/${serverId}/${action}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    setTimeout(() => refreshStatus(), 2000);
                } else {
                    alert('오류: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Server control failed:', error);
                alert('서버 제어 실패: ' + error.message);
            });
        }

        // Configure autostart
        function configureAutostart() {
            if (!confirm('윈도우 자동시작을 설정하시겠습니까?')) {
                return;
            }

            fetch('/api/system/autostart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                } else {
                    alert('오류: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Autostart configuration failed:', error);
                alert('자동시작 설정 실패: ' + error.message);
            });
        }

        // Shutdown gateway
        function shutdownGateway() {
            if (!confirm('정말로 게이트웨이를 종료하시겠습니까?')) {
                return;
            }

            fetch('/api/system/shutdown', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                } else {
                    alert('오류: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Shutdown failed:', error);
                alert('종료 실패: ' + error.message);
            });
        }

        // Edit server (placeholder)
        function editServer(serverId) {
            alert('서버 설정 기능은 향후 구현 예정입니다.');
        }

        // Manage domains (placeholder)
        function manageDomains() {
            alert('도메인 관리 기능은 향후 구현 예정입니다.');
        }

        // Database details functions
        function showDatabaseDetails() {
            const modal = document.getElementById('databaseModal');
            modal.style.display = 'block';

            fetch('/api/postgresql')
                .then(response => response.json())
                .then(data => {
                    if (data.databases) {
                        displayAllDatabases(data);
                    } else {
                        displayError('데이터베이스 정보를 불러올 수 없습니다.');
                    }
                })
                .catch(error => {
                    console.error('Database fetch error:', error);
                    displayError('데이터베이스 연결 오류: ' + error.message);
                });
        }

        function closeDatabaseDetails() {
            const modal = document.getElementById('databaseModal');
            modal.style.display = 'none';
        }

        function displayAllDatabases(data) {
            const content = document.getElementById('databaseContent');

            console.log('Received data:', data); // 디버깅용

            if (!data || !data.databases || !Array.isArray(data.databases) || data.databases.length === 0) {
                content.innerHTML = '<p>데이터베이스를 찾을 수 없습니다.</p>';
                return;
            }

            let html = '<div class="database-overview">';
            html += '<h3>🗄️ PostgreSQL 데이터베이스 전체 현황</h3>';

            // 전체 통계 표시
            if (data.statistics) {
                html += '<div class="statistics-section">';
                html += '<div class="stat-item">총 데이터베이스: <strong>' + (data.statistics.totalDatabases || 0) + '개</strong></div>';
                html += '<div class="stat-item">총 테이블: <strong>' + (data.statistics.totalTables || 0) + '개</strong></div>';
                html += '<div class="stat-item">총 레코드: <strong>' + (data.statistics.totalRecords || 0) + '개</strong></div>';
                html += '</div>';
            }

            html += '<div class="databases-list">';

            data.databases.forEach(database => {
                if (!database || !database.name) return; // 안전성 체크

                html += '<div class="database-category">';
                html += '<h4>🗂️ ' + database.name + '</h4>';

                if (database.description) {
                    html += '<p class="db-description">' + database.description + '</p>';
                }

                if (database.tables && Array.isArray(database.tables) && database.tables.length > 0) {
                    html += '<div class="db-stats">테이블 ' + database.tables.length + '개 | 총 레코드 ' + (database.totalRecords || 0) + '개</div>';

                    html += '<div class="tables-grid">';
                    database.tables.forEach(table => {
                        if (!table || !table.name) return; // 안전성 체크

                        html += '<div class="table-card">';
                        html += '<div class="table-name">📋 ' + (table.schema || 'public') + '.' + table.name + '</div>';
                        html += '<div class="table-stats">레코드: ' + (table.rowCount || 0) + '개 | 컬럼: ' + (table.columns ? table.columns.length : 0) + '개</div>';
                        html += '<button class="btn btn-sm btn-info" onclick="showTableData(\'' + (table.schema || 'public') + '\', \'' + table.name + '\')">데이터 보기</button>';
                        html += '</div>';
                    });
                    html += '</div>';
                } else {
                    html += '<div class="no-tables">테이블이 없습니다.</div>';
                }

                html += '</div>';
            });

            html += '</div>';
            html += '</div>';
            content.innerHTML = html;
        }

        function showTableData(schema, table) {
            const content = document.getElementById('databaseContent');
            content.innerHTML = '<div style="text-align: center; padding: 20px;"><div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #667eea; border-radius: 50%; animation: spin 1s linear infinite;"></div><p>테이블 데이터를 불러오는 중...</p></div>';

            fetch('/api/postgresql/table/' + schema + '/' + table + '?limit=20')
                .then(response => response.json())
                .then(data => {
                    if (data.data) {
                        displayTableData(schema, table, data.data);
                    } else {
                        displayError('테이블 데이터를 불러올 수 없습니다.');
                    }
                })
                .catch(error => {
                    console.error('Table data fetch error:', error);
                    displayError('테이블 데이터 로딩 오류: ' + error.message);
                });
        }

        function displayTableData(schema, table, data) {
            const content = document.getElementById('databaseContent');

            let html = '<div>';
            html += '<button class="btn btn-primary" onclick="showDatabaseDetails()" style="margin-bottom: 15px;">← 테이블 목록으로 돌아가기</button>';
            html += '<h3>📊 ' + schema + '.' + table + ' 테이블 데이터 (최대 20개)</h3>';

            if (data.length === 0) {
                html += '<p>테이블에 데이터가 없습니다.</p>';
            } else {
                html += '<div class="data-preview">';
                html += '<table class="data-table">';

                // 헤더 생성
                html += '<thead><tr>';
                Object.keys(data[0]).forEach(key => {
                    html += '<th>' + key + '</th>';
                });
                html += '</tr></thead>';

                // 데이터 행 생성
                html += '<tbody>';
                data.forEach(row => {
                    html += '<tr>';
                    Object.values(row).forEach(value => {
                        const displayValue = value === null ? '<em>NULL</em>' : String(value).substring(0, 50) + (String(value).length > 50 ? '...' : '');
                        html += '<td>' + displayValue + '</td>';
                    });
                    html += '</tr>';
                });
                html += '</tbody>';

                html += '</table>';
                html += '</div>';
            }

            html += '</div>';
            content.innerHTML = html;
        }

        function displayError(message) {
            const content = document.getElementById('databaseContent');
            content.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;"><h3>❌ 오류</h3><p>' + message + '</p><button class="btn btn-primary" onclick="closeDatabaseDetails()">닫기</button></div>';
            console.error('Database details error:', message);
        }

        // Close modal when clicking outside
        document.getElementById('databaseModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDatabaseDetails();
            }
        });

        // Auto-refresh every 30 seconds
        setInterval(refreshStatus, 30000);
    </script>
</body>
</html>