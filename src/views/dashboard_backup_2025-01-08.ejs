<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>대시보드 - OMEN 서버 게이트웨이</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f7fafc;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header h1 {
            font-size: 24px;
        }
        .header a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background: rgba(255,255,255,0.2);
            border-radius: 5px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .stat-card h3 {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        .stat-value {
            font-size: 32px;
            font-weight: bold;
            color: #333;
        }
        .servers {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .servers-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        .servers-header h2 {
            font-size: 20px;
            color: #333;
        }
        .server-item {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .server-info h3 {
            font-size: 18px;
            color: #333;
            margin-bottom: 5px;
        }
        .server-info p {
            color: #666;
            font-size: 14px;
        }
        .server-status {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        .status-running {
            background: #48bb78;
        }
        .status-stopped {
            background: #cbd5e0;
        }
        .server-actions {
            display: flex;
            gap: 10px;
        }
        button {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }
        .btn-start {
            background: #48bb78;
            color: white;
        }
        .btn-stop {
            background: #f56565;
            color: white;
        }
        .btn-restart {
            background: #ed8936;
            color: white;
        }
        button:hover {
            opacity: 0.8;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .control-panel {
            margin-top: 30px;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .control-panel h2 {
            margin-bottom: 20px;
            color: #333;
        }
        .control-buttons {
            display: flex;
            gap: 20px;
        }
        .btn-tunnel {
            background: #805ad5;
            color: white;
        }
        .btn-postgres {
            background: #3182ce;
            color: white;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🖥️ OMEN 서버 게이트웨이</h1>
        <div>
            <a href="/database">데이터베이스</a>
            <span>관리자: <%= user.phone %></span>
            <a href="/logout">로그아웃</a>
        </div>
    </div>
    
    <div class="container">
        <div class="stats">
            <div class="stat-card">
                <h3>CPU 사용률</h3>
                <div class="stat-value"><%= system.cpu && system.cpu.usage ? system.cpu.usage : (typeof system.cpu === 'number' ? system.cpu : 0) %>%</div>
            </div>
            <div class="stat-card">
                <h3>메모리 사용률</h3>
                <div class="stat-value"><%= system.memory && system.memory.usage ? system.memory.usage : (typeof system.memory === 'number' ? system.memory : 0) %>%</div>
            </div>
            <div class="stat-card">
                <h3>디스크 사용률</h3>
                <div class="stat-value"><%= system.disk && system.disk.usage ? system.disk.usage : (typeof system.disk === 'number' ? system.disk : 0) %>%</div>
            </div>
        </div>
        
        <div class="servers">
            <div class="servers-header">
                <h2>서버 관리</h2>
            </div>
            <% servers.forEach(server => { %>
                <div class="server-item">
                    <div class="server-info">
                        <h3><a href="/server/<%= server.server_id %>" style="color: #333; text-decoration: none;"><%= server.name %></a></h3>
                        <p>포트: <%= server.port %> | <%= server.description %></p>
                    </div>
                    <div class="server-status">
                        <span class="status-indicator status-<%= server.current_status %>"></span>
                        <span><%= server.current_status === 'healthy' ? '정상' :
                                    server.current_status === 'offline' ? '오프라인' :
                                    server.current_status === 'unhealthy' ? '비정상' :
                                    server.current_status === 'unknown' ? '알수없음' : '상태불명' %></span>
                    </div>
                    <div class="server-actions">
                        <a href="/server/<%= server.server_id %>" style="background: #667eea; color: white; padding: 8px 16px; border-radius: 5px; text-decoration: none; font-weight: 600; margin-right: 10px;">상세보기</a>
                        <% if (server.current_status !== 'healthy') { %>
                            <button class="btn-start" onclick="startServer('<%= server.server_id %>')">시작</button>
                        <% } else { %>
                            <button class="btn-stop" onclick="stopServer('<%= server.server_id %>')">중지</button>
                            <button class="btn-restart" onclick="restartServer('<%= server.server_id %>')">재시작</button>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        </div>
        
        <div class="control-panel">
            <h2>시스템 제어</h2>
            <div class="control-buttons">
                <button class="btn-tunnel" onclick="startTunnel()">Cloudflare Tunnel 시작</button>
                <button class="btn-postgres" onclick="startPostgres()">PostgreSQL 시작</button>
            </div>
        </div>
    </div>
    
    <script>
        function startServer(id) {
            fetch(`/server/start/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message || data.error);
                    if (data.success) location.reload();
                });
        }
        
        function stopServer(id) {
            fetch(`/server/stop/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message || data.error);
                    if (data.success) location.reload();
                });
        }
        
        function restartServer(id) {
            stopServer(id);
            setTimeout(() => startServer(id), 2000);
        }
        
        function startTunnel() {
            fetch('/tunnel/start', { method: 'POST' })
                .then(res => res.json())
                .then(data => alert(data.message || data.error));
        }
        
        function startPostgres() {
            fetch('/postgres/start', { method: 'POST' })
                .then(res => res.json())
                .then(data => alert(data.message || data.error));
        }
        
        // 5초마다 페이지 새로고침
        setInterval(() => location.reload(), 5000);
    </script>
</body>
</html>