<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÎåÄÏãúÎ≥¥Îìú - OMEN ÏÑúÎ≤Ñ Í≤åÏù¥Ìä∏Ïõ®Ïù¥</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f7fafc;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header h1 {
            font-size: 24px;
        }
        .header a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background: rgba(255,255,255,0.2);
            border-radius: 5px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .stat-card h3 {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        .stat-value {
            font-size: 32px;
            font-weight: bold;
            color: #333;
        }
        .servers {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .servers-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        .servers-header h2 {
            font-size: 20px;
            color: #333;
        }
        .server-item {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .server-info h3 {
            font-size: 18px;
            color: #333;
            margin-bottom: 5px;
        }
        .server-info p {
            color: #666;
            font-size: 14px;
        }
        .server-status {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        .status-running {
            background: #48bb78;
        }
        .status-stopped {
            background: #cbd5e0;
        }
        .server-actions {
            display: flex;
            gap: 10px;
        }
        button {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }
        .btn-start {
            background: #48bb78;
            color: white;
        }
        .btn-stop {
            background: #f56565;
            color: white;
        }
        .btn-restart {
            background: #ed8936;
            color: white;
        }
        button:hover {
            opacity: 0.8;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .control-panel {
            margin-top: 30px;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .control-panel h2 {
            margin-bottom: 20px;
            color: #333;
        }
        .control-buttons {
            display: flex;
            gap: 20px;
        }
        .btn-tunnel {
            background: #805ad5;
            color: white;
        }
        .btn-postgres {
            background: #3182ce;
            color: white;
        }
        .btn-database {
            background: #38a169;
            color: white;
        }
        .btn-website {
            background: #d69e2e;
            color: white;
        }
        .server-metrics {
            margin-top: 8px;
            font-size: 13px;
            color: #666;
        }
        .server-metrics span {
            margin-right: 15px;
            padding: 2px 6px;
            background: #f1f1f1;
            border-radius: 3px;
        }
        .btn-database {
            background: #38a169;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 5px;
            font-size: 12px;
        }
        .btn-database:hover {
            background: #2f855a;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            max-width: 800px;
            max-height: 80%;
            overflow-y: auto;
        }
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
        .db-section {
            margin-bottom: 20px;
        }
        .db-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        .db-table th, .db-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .db-table th {
            background-color: #f2f2f2;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üñ•Ô∏è OMEN ÏÑúÎ≤Ñ Í≤åÏù¥Ìä∏Ïõ®Ïù¥</h1>
        <div>
            <a href="/database">Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§</a>
            <span>Í¥ÄÎ¶¨Ïûê: <%= user.phone %></span>
            <a href="/logout">Î°úÍ∑∏ÏïÑÏõÉ</a>
        </div>
    </div>
    
    <div class="container">
        <div class="stats">
            <div class="stat-card">
                <h3>CPU ÏÇ¨Ïö©Î•†</h3>
                <div class="stat-value"><%= system.cpu && system.cpu.usage ? system.cpu.usage : (typeof system.cpu === 'number' ? system.cpu : 0) %>%</div>
            </div>
            <div class="stat-card">
                <h3>Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†</h3>
                <div class="stat-value"><%= system.memory && system.memory.usage ? system.memory.usage : (typeof system.memory === 'number' ? system.memory : 0) %>%</div>
            </div>
            <div class="stat-card">
                <h3>ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Î•†</h3>
                <div class="stat-value"><%= system.disk && system.disk.usage ? system.disk.usage : (typeof system.disk === 'number' ? system.disk : 0) %>%</div>
            </div>
        </div>
        
        <div class="servers">
            <div class="servers-header">
                <h2>ÏÑúÎ≤Ñ Í¥ÄÎ¶¨</h2>
            </div>
            <% servers.forEach(server => { %>
                <div class="server-item">
                    <div class="server-info">
                        <h3><a href="/server/<%= server.server_id %>" style="color: #333; text-decoration: none;"><%= server.name %></a></h3>
                        <p>Ìè¨Ìä∏: <%= server.port %> | <%= server.description %></p>
                        <div class="server-metrics">
                            <span>CPU: <%= server.current_cpu_usage ? parseFloat(server.current_cpu_usage).toFixed(1) : 0 %>%</span>
                            <span>Î©îÎ™®Î¶¨: <%= server.current_memory_usage ? parseFloat(server.current_memory_usage).toFixed(1) : 0 %>%</span>
                            <span>ÎîîÏä§ÌÅ¨: <%= server.current_disk_usage ? parseFloat(server.current_disk_usage).toFixed(1) : 0 %>%</span>
                        </div>
                    </div>
                    <div class="server-status">
                        <span class="status-indicator status-<%= server.current_status %>"></span>
                        <span><%= server.current_status === 'healthy' ? 'Ï†ïÏÉÅ' :
                                    server.current_status === 'offline' ? 'Ïò§ÌîÑÎùºÏù∏' :
                                    server.current_status === 'unhealthy' ? 'ÎπÑÏ†ïÏÉÅ' :
                                    server.current_status === 'unknown' ? 'ÏïåÏàòÏóÜÏùå' : 'ÏÉÅÌÉúÎ∂àÎ™Ö' %></span>
                    </div>
                    <div class="server-actions">
                        <a href="/server/<%= server.server_id %>" style="background: #667eea; color: white; padding: 8px 16px; border-radius: 5px; text-decoration: none; font-weight: 600; margin-right: 10px;">ÏÉÅÏÑ∏Î≥¥Í∏∞</a>
                        <button class="btn-database" data-server-id="<%= server.server_id %>" data-server-name="<%= server.name %>" onclick="showDatabaseInfoSafe(this)">DB Ï†ïÎ≥¥</button>
                        <button class="btn-website" data-server-id="<%= server.server_id %>" data-server-port="<%= server.port %>" onclick="openServerWebsiteSafe(this)">ÏõπÏÇ¨Ïù¥Ìä∏</button>
                        <% if (server.current_status !== 'healthy') { %>
                            <button class="btn-start" onclick="startServer('<%= server.server_id %>')">ÏãúÏûë</button>
                        <% } else { %>
                            <button class="btn-stop" onclick="stopServer('<%= server.server_id %>')">Ï§ëÏßÄ</button>
                            <button class="btn-restart" onclick="restartServer('<%= server.server_id %>')">Ïû¨ÏãúÏûë</button>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        </div>
        
        <div class="control-panel">
            <h2>ÏãúÏä§ÌÖú Ï†úÏñ¥</h2>
            <div class="control-buttons">
                <button class="btn-tunnel" onclick="startTunnel()">Cloudflare Tunnel ÏãúÏûë</button>
                <button class="btn-postgres" onclick="startPostgres()">PostgreSQL ÏãúÏûë</button>

                <!-- Ìè¨Ìä∏ Í¥ÄÎ¶¨ Î≤ÑÌäºÎì§ (2025-09-29 Ï∂îÍ∞Ä) -->
                <button class="btn-port-check" onclick="checkAllPorts()" style="background: #4299e1; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">Ìè¨Ìä∏ ÏÉÅÌÉú ÌôïÏù∏</button>
                <button class="btn-safe-restart" onclick="performSafeRestart()" style="background: #38a169; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">ÏïàÏ†ÑÌïú Ïû¨ÏãúÏûë</button>
                <button class="btn-kill-enterprisedb" onclick="killEnterpriseDB()" style="background: #e53e3e; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">EnterpriseDB Ï¢ÖÎ£å</button>
                <button class="btn-cleanup-node" onclick="cleanupNodeProcesses()" style="background: #ed8936; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">Node.js Ï†ïÎ¶¨</button>

                <button onclick="testModal()" style="background: #e53e3e; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">Î™®Îã¨ ÌÖåÏä§Ìä∏</button>
                <button onclick="alert('JavaScript ÏûëÎèô ÌÖåÏä§Ìä∏!')" style="background: #ff0000; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">JS ÌÖåÏä§Ìä∏</button>
            </div>
        </div>

        <!-- Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ïÎ≥¥ Î™®Îã¨ -->
        <div id="databaseModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 id="modalTitle">Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ïÎ≥¥</h2>
                    <span class="close" onclick="closeDatabaseModal()">&times;</span>
                </div>
                <div id="databaseContent">
                    <div class="loading">Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // üéØ ÏôÑÏ†ÑÌûà ÏÉàÎ°úÏö¥ Îã®ÏàúÌïú JavaScript - EJS Ï∂©Îèå Î∞©ÏßÄ

        // Í∏∞Î≥∏ ÏÑúÎ≤Ñ Ï†úÏñ¥ Ìï®ÏàòÎì§
        function startServer(id) {
            if (!confirm('ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
            fetch('/server/start/' + id, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message || data.error);
                    if (data.success) location.reload();
                })
                .catch(err => alert('Ïò§Î•ò: ' + err.message));
        }

        function stopServer(id) {
            if (!confirm('ÏÑúÎ≤ÑÎ•º Ï§ëÏßÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
            fetch('/server/stop/' + id, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message || data.error);
                    if (data.success) location.reload();
                })
                .catch(err => alert('Ïò§Î•ò: ' + err.message));
        }

        function restartServer(id) {
            if (!confirm('ÏÑúÎ≤ÑÎ•º Ïû¨ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
            stopServer(id);
            setTimeout(function() { startServer(id); }, 2000);
        }

        function startTunnel() {
            fetch('/tunnel/start', { method: 'POST' })
                .then(res => res.json())
                .then(data => alert(data.message || data.error))
                .catch(err => alert('Ïò§Î•ò: ' + err.message));
        }

        function startPostgres() {
            fetch('/postgres/start', { method: 'POST' })
                .then(res => res.json())
                .then(data => alert(data.message || data.error))
                .catch(err => alert('Ïò§Î•ò: ' + err.message));
        }

        // üî• ÏôÑÏ†ÑÌûà ÏÉàÎ°úÏö¥ Î™®Îã¨ ÏãúÏä§ÌÖú - Îã®ÏàúÌôî
        function showDatabaseInfoSafe(button) {
            try {
                alert('DB Ï†ïÎ≥¥ Î™®Îã¨ Í∏∞Îä•ÏùÄ ÌòÑÏû¨ Í∞úÎ∞ú Ï§ëÏûÖÎãàÎã§.');

                // ÏûÑÏãú: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                window.location.href = '/database';
            } catch (error) {
                alert('DB Ï†ïÎ≥¥ ÌëúÏãú Ï§ë Ïò§Î•ò: ' + error.message);
            }
        }

        // ÏõπÏÇ¨Ïù¥Ìä∏ Ïó¥Í∏∞ Ìï®Ïàò - ÏôÑÏ†Ñ Îã®ÏàúÌôî
        function openServerWebsiteSafe(button) {
            try {
                var port = button.getAttribute('data-server-port');
                var serverId = button.getAttribute('data-server-id');

                var urls = {
                    '8080': 'https://learning.platformmakers.org',
                    '9090': 'https://golfcourse.platformmakers.org',
                    '3000': 'https://admin.platformmakers.org',
                    '7777': 'https://platformmakers.org'
                };

                var url = urls[port] || ('http://localhost:' + port);
                window.open(url, '_blank');
            } catch (error) {
                alert('ÏõπÏÇ¨Ïù¥Ìä∏ Ïó¥Í∏∞ Ïò§Î•ò: ' + error.message);
            }
        }

        // Ìè¨Ìä∏ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§ (2025-09-29 Ï∂îÍ∞Ä)
        function checkAllPorts() {
            if (!confirm('Î™®Îì† Ìè¨Ìä∏ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;

            fetch('/api/ports/status', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(res => res.json())
            .then(data => {
                let message = 'Ìè¨Ìä∏ ÏÉÅÌÉú ÌôïÏù∏ ÏôÑÎ£å:\n\n';
                message += 'ÏÇ¨Ïö©Ï§ë: ' + data.summary.used + 'Í∞ú\n';
                message += 'ÏÇ¨Ïö©Í∞ÄÎä•: ' + data.summary.available + 'Í∞ú\n\n';

                Object.keys(data.ports).forEach(serviceName => {
                    const port = data.ports[serviceName];
                    message += serviceName + ' (Ìè¨Ìä∏ ' + port.port + '): ';
                    message += port.isUsed ? 'ÏÇ¨Ïö©Ï§ë' : 'ÏÇ¨Ïö©Í∞ÄÎä•';
                    message += '\n';
                });

                alert(message);
            })
            .catch(err => alert('Ìè¨Ìä∏ ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò: ' + err.message));
        }

        function performSafeRestart() {
            if (!confirm('ÏïàÏ†ÑÌïú Ïû¨ÏãúÏûëÏùÑ ÏàòÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏù¥ ÏûëÏóÖÏùÄ Îã§ÏùåÏùÑ ÏàòÌñâÌï©ÎãàÎã§:\n- EnterpriseDB Ï¢ÖÎ£å\n- Ï§ëÎ≥µ Node.js ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨\n- Ìè¨Ìä∏ Ï∂©Îèå Ìï¥Í≤∞')) return;

            fetch('/api/ports/safe-restart', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    alert('ÏïàÏ†ÑÌïú Ïû¨ÏãúÏûë ÏôÑÎ£å!\n\n' + data.message + '\n\nÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï©ÎãàÎã§.');
                    location.reload();
                } else {
                    alert('Ïû¨ÏãúÏûë Ïã§Ìå®: ' + data.message);
                }
            })
            .catch(err => alert('ÏïàÏ†ÑÌïú Ïû¨ÏãúÏûë Ïò§Î•ò: ' + err.message));
        }

        function killEnterpriseDB() {
            if (!confirm('EnterpriseDB HTTP ÏÑúÎ≤ÑÎ•º Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÌè¨Ìä∏ 8080ÏùÑ Ï†êÏú†ÌïòÍ≥† ÏûàÎäî EnterpriseDBÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.')) return;

            fetch('/api/ports/kill-enterprisedb', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(res => res.json())
            .then(data => {
                alert(data.message);
                if (data.success) {
                    location.reload();
                }
            })
            .catch(err => alert('EnterpriseDB Ï¢ÖÎ£å Ïò§Î•ò: ' + err.message));
        }

        function cleanupNodeProcesses() {
            if (!confirm('Ï§ëÎ≥µ Node.js ÌîÑÎ°úÏÑ∏Ïä§Î•º Ï†ïÎ¶¨ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Î™®Îì† Node.js ÌîÑÎ°úÏÑ∏Ïä§Í∞Ä Ï¢ÖÎ£åÎê©ÎãàÎã§.')) return;

            fetch('/api/ports/cleanup-node', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(res => res.json())
            .then(data => {
                alert(data.message);
                if (data.success) {
                    alert('Node.js ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨ ÏôÑÎ£å!\n\nÏû†Ïãú ÌõÑ ÌéòÏù¥ÏßÄÍ∞Ä Îã§Ïãú Î°úÎìúÎê©ÎãàÎã§.');
                    setTimeout(() => location.reload(), 3000);
                }
            })
            .catch(err => alert('Node.js Ï†ïÎ¶¨ Ïò§Î•ò: ' + err.message));
        }

        // ÌÖåÏä§Ìä∏ Ìï®Ïàò - ÏôÑÏ†Ñ Îã®ÏàúÌôî
        function testModal() {
            alert('JavaScript ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!');
        }

        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú JavaScript ÏûëÎèô ÌôïÏù∏
        document.addEventListener('DOMContentLoaded', function() {
            console.log('‚úÖ JavaScript Î°úÎìú ÏôÑÎ£å');
        });
    </script>
</body>
</html>